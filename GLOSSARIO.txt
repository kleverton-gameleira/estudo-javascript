********* COMANDOS PROMPT *********

node --version = retorna qual é a versao do node que esta instalada no sistema 

npm --version = retorna qual e a versao do npm(gerenciador de pacotes) que esta instalado do sistema

npm install --global yarn = este comando instala o yarn(gerenciador de pacotes/dependencias) no sistema atraves do npm

yarn --version = retorna a versao do yarn(gerenciador de pacotes/dependencias) que esta instalado no sistema

*****************************************************************************************************************

**** VARIAVEIS E TIPOS DE DADOS *****

var nome_var = forma de declaracao de variavel com escopo mais abrangente

let nome_var = forma de declaracao de variavel com escopo local, ou seja, escopo de bloco

let nome_var = 'string'/"string" -> atribui a variavel um dado do tipo string

let nome_var = 100 -> atribui a variavel um dado do tipo instala

let nome_var = 15.5 -> atribui a variavel um dado do tipo float

let nome_var = true/false -> atribui a variavel um dado do tipo boolean 

let nome_var = ['dado','dado','dado','dado','dado'] -> atribui a variavel um dado do tipo array/vetor

let nome_var = {dado = 'tipoDado', dado = 15} -> atribui a variavel um dado do tipo objeto 

******************************************************************************************************************

****** ESTRUTURAS CONDICIONAIS *******

** estrutura condicional IF/ELSE IF/ELSE para verificar se a expressao e verdeira ou false, caso seja verdadeira o primeiro bloco e chamado
caso seja falsa a expressao o segundo o bloco de baixo e executado

if (expressao){        
    codigo
}else if(expressao){
    if(expressao){
        codigo
    }else{
        codigo
    }
}else{
    codigo
}

** estrutura condicional SWITCH(opcao) / CASE : verifica se a op foi a escolhida e determina qual bloco sera executado com base nessa analise

switch(opcao){
    case 1:
        codigo
        break
    case 2:
        codigobreak
    default:
        codigo
}

*******************************************************************************************************************

******** ESTRUTURAS DE REPETIÇÃO - LOOP *******

***** ESTRUTURA FOR ******

for(var i = 0; i <= 10; i++){
    codigo
}


***** ESTRUTURA WHILE *****

let i = 0 
while(i <= 10){
    codigo
    i++
}

***** ESTRUTURA DO/WHILE ******

let i = 0
do{
    codigo
    i++
}while(i <= 10)


*******************************************************************************************************************
***** OPERADORES MATEMATICOS *****

+,  -,  *,   /,  %,  +=,  -=,  var++,  var--,  ++var,  --var


***** OPERADORES LOGICOS *****

and/ && = verifica se as duas expressoes do lado direito e do lado esquerdo sao verdadeiros para que o resultado da operacao seja verdadeira

or/|| =  verifica se alguma das expressoes é verdadeiro qual quer um dos lados esquerdo ou direito, se um deles for verdadeiro a operacao retorna verdadeiro

not/! =  

***** OPERADORES RELACIONAIS *****

==  -> operador de igualdade

!=  -> operador de diferença 

>  -> operador de maior que 

<  -> operador de menor que

>=  -> operador de maior igual a 

<=  -> operador de menor igual a 

===  -> operador de igual total,ou seja, se tanto o valor quanto o tipo sao iguais



*********************************************************************************************

**** FUNCOES DE TIME ****

setInterval(funcao,1000) = a funcao setInterval defini um intervalo de tempo em que a funcao passada como parametro
                           na funcao sera chamada seguidas vezes

setTimeout(funcao,1000) = a funcao setTimeout chama a funcao passada como parametro com um delay de tempo com base no
                          passado no segundo parametro

*********************************************************************************************
 
***** TRATAMENTO DE STRINGS ******



***** TRATAMENTO DE DATAS ******



***** TRABALHANDO COM ARRAYS ******

let nome_array = new Array('dado','dado','dado','dado','dado','dado') = forma de instaciação do objeto array com os DADOS

let nome_array = ['dado','dado','dado','dado','dado'] = forma mais utilizada de criar um array 

nome_array[0] = 'novo_dado'  -> substitui o dado que esta na posicao do array pelo novo_dado 

nome_array.push('dado') = a funcao PUSH adiciona o dado passado como parametro na ultima posicao disponivel so Array

nome_array.length = o metodo LENGTH retorna a quantidade atual de elementos que o array possui

nome_array.sort() = o metodo SORT ordena o array em ordem alfabetica . OBS se for necessario ordenar um array com tipo numerico é necessario uma 
                    funcao anonima dentro do sort: sort(function(a,b){return a- b})

delete nome_array[0] = a funcao delete retira o valor que esta na posicao do array passada como parametro, deixando esta posicao vazia dentro do array


**** TRABALHANDO COM A FUNCAO SPLICE ****

nome_array.splice(3,1) = a funcao splice retira posicoes do array de acordo com os dados passados como parametro

nome_array.splice(1,0,'dados adicionado') = a funcao splice tambem pode ser usada para inserir um elemento/dado em uma determinada do array
                                            de acordo com os parametros passados

nome_array.splice(2,1,'dado_novo') = a funcao splice tbm pode ser utilizada para substituir dados em uma determinada posicao de um array
                                     de acordo com os valores passados como parametro

*******************************************************************************************************************

nome_array.pop() = a funcao pop remove o ultimo elemento da ultima posicao do array:. OBS: quando o pop() é usado adicionando o elemento a uma 
                   outra variavel ele retira o elemento do array e adiciona-o a variavel

nome_array.shift() = a funcao shift remove o primeiro elemento do array:. OBS:. assim como no pop() o shift() se usado com uma variavel ela retira
                     o elemento do array e adiciona o elemento na variavel 


nome_array.unshift('dado') = a funcao unshift() adiciona um elemento na primeira posicao do Array

nome_array.slice(inicio(incluso),final) =  a funcao slice() faz um recorte do array com base nos parametros de inicio e final passados 

nome_array.concat(novo_array) = a funcao concat junta o array passado como parametro com o array que voce esta trabalhando

******* TRABALHANDO COM ARRAY ********

nome_array.forEach(nome_funcao) = a funcao forEach executa a funcao passada como parametro para cada elemento do array ao qual o ele foi associadao

nome_array.map(function(){
    return codigo               = a funcao map retorna um novo array contendo o resultado da operacao definida como parametro para cada elemento 
                                  do array associado a ele
})

nome_array.filter(funcao) = a funcao filter retorna um array com os dados que correspondem aos criterios de filtro